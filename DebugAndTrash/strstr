section .data
str: db"    call readFlags  ",0
strf: db"CA",0
section .text
global main
main:
    mov rbp, rsp; for correct debugging
    mov rdi, str
    mov rsi, strf
    mov rcx, 0
    call strstr
    ret
    
    
strstr:;input[char* str, char* fstr, flag ignoreRegistr]
    push rdi
    push rsi
    push r12
    push r13
    push r14
    push r15
    mov rbx, rcx
    mov r12, rdi ;храним ссылку на искомое слово
    mov rdi, rsi
    call strlen
    dec rax
    mov rdi, r12
    mov r12, rsi
    mov r13, rax  ;храним количество символов в искомом слове
    movzx rsi, byte [rsi]
.while:
    cmp rbx, 0
    je .notFlag1
    mov r14, rdi
    mov rdi, rsi
    call downRegistr
    mov rsi, rdi
    call upRegistr
    mov r15, rdi
    mov rdi, r14
    call strchr
    mov r14, rax
    mov rsi, r15
    call strchr
    dec r14
    dec rax
    cmp rax, r14
    jbe .raxLess
    mov rax, r14 
.raxLess:
    inc rax
    jmp .flag1
.notFlag1: 
    call strchr
.flag1:
    test rax, rax
    jz .end
    mov rdi, rax
    inc rdi
    mov rcx, r13
    mov rdx, r12
.for:
    movzx r8, byte[rdx]
    movzx r9, byte[rax]
    cmp rbx, 0
    je .notFlag2
    mov r14, rdi
    mov rdi, r8
    call downRegistr
    mov r8, rdi
    mov rdi, r9 
    call downRegistr
    mov r9, rdi
    mov rdi, r14
.notFlag2:    
    cmp r8, r9
    jne .while
    inc rdx
    inc rax
    loop .for
    dec rdi
    mov rax, rdi
.end:
    pop r15
    pop r14
    pop r13
    pop r12
    pop rsi
    pop rdi
    ret
    
upRegistr: ;input[char* chr]; output[]
    cmp rdi, 'a'
    jb .end
    cmp rdi, 'z'
    ja .end
    sub rdi, 32
.end:
    ret
    
downRegistr: ;input[char* chr]; output[]
    cmp rdi, 'A'
    jb .end
    cmp rdi, 'Z'
    ja .end
    add rdi, 32
.end:
    ret
    
    
strlen: ;input[char* str], output[int size]
    push rdi
    mov rax, 0
    mov rcx, -1
    repne scasb
    jz .found            
    mov rdi, -1        
    jmp .exit
.found:          
    pop rdx    
    sub rdi, rdx   
    mov rax, rdi
    mov rdi, rdx
    ret          
.exit:
    mov rax, 60
    syscall

strchr: ;input[char* str, char fchar], output[size_t position]
    push r12
    push rsi
    push rdi
    call strlen
    mov r12, rax
    mov rcx, rax
    mov rax, rsi
    repne scasb 
    pop rdi
    mov rax, rcx
    test rax, rax
    jz .exit
    sub r12, rax
    sub r12, 1
    mov rax, r12
    add rax, rdi
.exit:
    pop rsi
    pop r12
    ret  